import psycopg2 
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np

def create_correct_timeline():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    print("üöÄ –ü–û–î–ö–õ–Æ–ß–ê–ï–ú–°–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•...")
    
    try:
        conn = psycopg2.connect( 
            host="localhost",
            database="airport_db",
            user="postgres",
            password="farida",  
            port="5432"
        )
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        create_demo_with_realistic_data()
        return

    try:
        # –ó–ê–ü–†–û–° 1: –ü—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö
        print("\nüìä –ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï –û –†–ï–ô–°–ê–•...")
        
        query = """
        SELECT 
            f.flight_id,
            f.flight_no,
            al.airline_name,
            f.status,
            f.scheduled_departure,
            f.scheduled_arrival,
            EXTRACT(YEAR FROM CURRENT_DATE) as current_year
        FROM flights f
        JOIN airline al ON f.airline_id = al.airline_id
        LIMIT 1000;
        """
        
        df = pd.read_sql_query(query, conn)
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ–π—Å–∞—Ö")
        
        # –°–û–ó–î–ê–ï–ú –í–†–ï–ú–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ò
        print("üïê –°–û–ó–î–ê–ï–ú –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–ö–ò...")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
        current_year = int(df['current_year'].iloc[0]) if 'current_year' in df.columns else 2024
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–π—Å–∞
        start_date = datetime(current_year, 1, 1)
        dates = []
        
        for i in range(len(df)):
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Å—ã –ø–æ –≥–æ–¥—É
            days_offset = (i * 365) // len(df)
            flight_date = start_date + timedelta(days=days_offset)
            dates.append(flight_date)
        
        df['flight_date'] = dates
        df['year_month'] = df['flight_date'].dt.strftime('%Y-%m')
        df['month_name'] = df['flight_date'].dt.strftime('%B')
        
        # –ì–†–£–ü–ü–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ò
        print("üìà –ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–ï–ú –î–ê–ù–ù–´–ï –î–õ–Ø –ì–†–ê–§–ò–ö–û–í...")
        
        # 1. –î–∞–Ω–Ω—ã–µ –ø–æ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º –∏ –º–µ—Å—è—Ü–∞–º
        airline_monthly = df.groupby(['year_month', 'month_name', 'airline_name']).agg({
            'flight_id': 'count'
        }).reset_index()
        airline_monthly.rename(columns={'flight_id': 'flights_count'}, inplace=True)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        airline_monthly = airline_monthly.sort_values('year_month')
        
        print(f"‚úì –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(airline_monthly)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏")
        print(f"‚úì –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {airline_monthly['year_month'].min()} - {airline_monthly['year_month'].max()}")
        print(f"‚úì –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏: {df['airline_name'].nunique()} —à—Ç.")
        
        # 1. –ì–†–ê–§–ò–ö: –ö–û–õ–ò–ß–ï–°–¢–í–û –†–ï–ô–°–û–í –ü–û –ê–í–ò–ê–ö–û–ú–ü–ê–ù–ò–Ø–ú (–°–¢–û–õ–ë–ß–ê–¢–ê–Ø –î–ò–ê–ì–†–ê–ú–ú–ê)
        print("\nüìä –°–û–ó–î–ê–ï–ú –°–¢–û–õ–ë–ß–ê–¢–£–Æ –î–ò–ê–ì–†–ê–ú–ú–£...")
        
        fig1 = px.bar(airline_monthly,
                     x="airline_name",
                     y="flights_count",
                     color="airline_name",
                     animation_frame="year_month",
                     hover_name="airline_name",
                     hover_data={"month_name": True, "flights_count": True},
                     title="‚úàÔ∏è –î–ò–ù–ê–ú–ò–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê –†–ï–ô–°–û–í –ü–û –ê–í–ò–ê–ö–û–ú–ü–ê–ù–ò–Ø–ú<br>"
                           "<sub>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ –º–µ—Å—è—Ü–∞–º</sub>",
                     labels={
                         "flights_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤",
                         "airline_name": "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è",
                         "year_month": "–ú–µ—Å—è—Ü"
                     })
        
        fig1.update_layout(
            width=1200,
            height=700,
            font=dict(size=14),
            showlegend=True,
            xaxis_title="–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤",
            xaxis=dict(tickangle=45),
            plot_bgcolor='white'
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        fig1.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 1500
        fig1.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 800
        
        print("‚úÖ –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞!")
        fig1.show()
        
        # 2. –ì–†–ê–§–ò–ö: –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–°–Ø–¶–ê–ú (–õ–ò–ù–ï–ô–ù–´–ô)
        print("\nüìà –°–û–ó–î–ê–ï–ú –õ–ò–ù–ï–ô–ù–´–ô –ì–†–ê–§–ò–ö...")
        
        monthly_total = df.groupby(['year_month', 'month_name']).agg({
            'flight_id': 'count'
        }).reset_index()
        monthly_total.rename(columns={'flight_id': 'total_flights'}, inplace=True)
        monthly_total = monthly_total.sort_values('year_month')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
        monthly_total['cumulative_flights'] = monthly_total['total_flights'].cumsum()
        
        fig2 = px.line(monthly_total,
                      x="month_name",
                      y="cumulative_flights",
                      animation_frame="year_month",
                      markers=True,
                      title="üìà –ù–ê–ö–û–ü–õ–ï–ù–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –†–ï–ô–°–û–í –ó–ê –ì–û–î<br>"
                            "<sub>–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞</sub>",
                      labels={
                          "cumulative_flights": "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤",
                          "month_name": "–ú–µ—Å—è—Ü",
                          "year_month": "–ü–µ—Ä–∏–æ–¥"
                      })
        
        fig2.update_layout(
            width=1200,
            height=700,
            font=dict(size=14),
            showlegend=False,
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤",
            plot_bgcolor='white'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–æ—á–µ–∫
        fig2.update_traces(marker=dict(size=8, line=dict(width=2, color='darkblue')))
        
        print("‚úÖ –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≥–æ—Ç–æ–≤!")
        fig2.show()
        
        # 3. –ì–†–ê–§–ò–ö: –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í –†–ï–ô–°–û–í (PIE CHART –ê–ù–ò–ú–ê–¶–ò–Ø)
        print("\nü•ß –°–û–ó–î–ê–ï–ú –ö–†–£–ì–û–í–£–Æ –î–ò–ê–ì–†–ê–ú–ú–£ –° –ê–ù–ò–ú–ê–¶–ò–ï–ô...")
        
        status_monthly = df.groupby(['year_month', 'status']).agg({
            'flight_id': 'count'
        }).reset_index()
        status_monthly.rename(columns={'flight_id': 'count'}, inplace=True)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        all_months = status_monthly['year_month'].unique()
        all_statuses = status_monthly['status'].unique()
        
        complete_data = []
        for month in all_months:
            for status in all_statuses:
                count = status_monthly[
                    (status_monthly['year_month'] == month) & 
                    (status_monthly['status'] == status)
                ]['count'].sum()
                complete_data.append({
                    'year_month': month,
                    'status': status,
                    'count': count if count > 0 else 0
                })
        
        status_complete = pd.DataFrame(complete_data)
        
        fig3 = px.pie(status_complete,
                     values="count",
                     names="status",
                     animation_frame="year_month",
                     title="üîÑ –î–ò–ù–ê–ú–ò–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í –†–ï–ô–°–û–í<br>"
                           "<sub>–ö–∞–∫ –º–µ–Ω—è—é—Ç—Å—è —Å—Ç–∞—Ç—É—Å—ã —Ä–µ–π—Å–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º</sub>",
                     hole=0.3)
        
        fig3.update_layout(
            width=1000,
            height=800,
            font=dict(size=14)
        )
        
        print("‚úÖ –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞!")
        fig3.show()
        
        # 4. –ì–†–ê–§–ò–ö: –°–†–ê–í–ù–ï–ù–ò–ï –ê–í–ò–ê–ö–û–ú–ü–ê–ù–ò–ô (SCATTER)
        print("\nüîµ –°–û–ó–î–ê–ï–ú –¢–û–ß–ï–ß–ù–£–Æ –î–ò–ê–ì–†–ê–ú–ú–£...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è scatter plot
        airline_stats = df.groupby(['year_month', 'airline_name']).agg({
            'flight_id': 'count',
            'status': lambda x: (x == 'On Time').mean() * 100  # % –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
        }).reset_index()
        
        airline_stats.rename(columns={
            'flight_id': 'flights_count',
            'status': 'on_time_percentage'
        }, inplace=True)
        
        # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ 0
        airline_stats['on_time_percentage'] = airline_stats['on_time_percentage'].fillna(0)
        
        fig4 = px.scatter(airline_stats,
                         x="flights_count",
                         y="on_time_percentage",
                         size="flights_count",
                         color="airline_name",
                         hover_name="airline_name",
                         animation_frame="year_month",
                         title="üìä –°–†–ê–í–ù–ï–ù–ò–ï –ê–í–ò–ê–ö–û–ú–ü–ê–ù–ò–ô: –ö–û–õ–ò–ß–ï–°–¢–í–û –†–ï–ô–°–û–í vs –ü–£–ù–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨<br>"
                               "<sub>–†–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤</sub>",
                         labels={
                             "flights_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤",
                             "on_time_percentage": "–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (%)",
                             "airline_name": "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è"
                         })
        
        fig4.update_layout(
            width=1200,
            height=700,
            font=dict(size=14)
        )
        
        print("‚úÖ –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞!")
        fig4.show()
        
        print("\n" + "="*80)
        print("üéâ –í–°–ï –ì–†–ê–§–ò–ö–ò –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!")
        print("\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–∑—É–Ω–æ–∫ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º")
        print("2. –ù–∞–∂–º–∏—Ç–µ ‚ñ∂Ô∏è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏")
        print("3. –ù–∞–≤–æ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        create_demo_with_realistic_data()
    finally:
        conn.close()

def create_demo_with_realistic_data():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–µ"""
    
    print("üé≠ –°–û–ó–î–ê–ï–ú –î–ï–ú–û-–í–ï–†–°–ò–Æ –° –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò...")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    months = [f"2024-{str(i).zfill(2)}" for i in range(1, 13)]
    month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", 
                  "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    airlines = ["AeroFlot", "S7 Airlines", "Ural Airlines", "Pobeda", "Rossiya"]
    statuses = ["On Time", "Delayed", "Cancelled"]
    
    data = []
    for i, month in enumerate(months):
        for airline in airlines:
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ (—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)
            base_flights = 50
            if i in [5, 6, 7]:  # –õ–µ—Ç–æ - –±–æ–ª—å—à–µ —Ä–µ–π—Å–æ–≤
                flights = base_flights + np.random.randint(30, 50)
            elif i in [11, 0, 1]:  # –ó–∏–º–∞ - –º–µ–Ω—å—à–µ —Ä–µ–π—Å–æ–≤
                flights = base_flights + np.random.randint(10, 20)
            else:
                flights = base_flights + np.random.randint(20, 30)
            
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            on_time_rate = np.random.uniform(70, 95)
            
            data.append({
                'year_month': month,
                'month_name': month_names[i],
                'airline_name': airline,
                'flights_count': flights,
                'on_time_percentage': on_time_rate
            })
    
    df_demo = pd.DataFrame(data)
    
    # –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(df_demo,
                x="airline_name",
                y="flights_count", 
                color="airline_name",
                animation_frame="year_month",
                title="‚úàÔ∏è –î–ï–ú–û: –î–ò–ù–ê–ú–ò–ö–ê –†–ï–ô–°–û–í –ü–û –ê–í–ò–ê–ö–û–ú–ü–ê–ù–ò–Ø–ú (2024)<br>"
                      "<sub>–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏</sub>",
                labels={
                    "flights_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤",
                    "airline_name": "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è",
                    "year_month": "–ú–µ—Å—è—Ü"
                })
    
    fig.update_layout(
        width=1000,
        height=600,
        font=dict(size=14),
        showlegend=True
    )
    
    print("‚úÖ –î–µ–º–æ-–≥—Ä–∞—Ñ–∏–∫ –≥–æ—Ç–æ–≤!")
    fig.show()

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –ì–†–ê–§–ò–ö–û–í")
    print("="*80)
    
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ù–ï plotly.py
    current_file = __file__
    if 'plotly' in current_file.lower():
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è 'plotly.py'")
        print("üìù –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞!")
    else:
        create_correct_timeline() 